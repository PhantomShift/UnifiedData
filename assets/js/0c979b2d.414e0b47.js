"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[336],{90273:e=>{e.exports=JSON.parse('{"functions":[{"name":"GetProxy","desc":"If the data exists, returns its relevant [ClientProxy] or creates a new one.\\nOtherwise returns `nil`.","params":[{"name":"key","desc":"","lua_type":"DataKey"}],"returns":[{"desc":"","lua_type":"ClientProxy?\\r\\n"}],"function_type":"static","realm":["Client"],"source":{"line":189,"path":"src/Client.lua"}},{"name":"OnKeyAdded","desc":"","params":[{"name":"callback","desc":"Callback to be fired when the server adds a new table","lua_type":"(DataKey) -> ()"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":205,"path":"src/Client.lua"}},{"name":"OnKeyRemoved","desc":"","params":[{"name":"callback","desc":"Callback to be fired when the server removes a table","lua_type":"(DataKey) -> ()"}],"returns":[],"function_type":"static","realm":["Client"],"source":{"line":214,"path":"src/Client.lua"}},{"name":"WaitForProxy","desc":"Essentially a wrapper around Client.GetProxy that will block the thread until `timeout` seconds occur (default of 5)\\nif the relevant data doesn\'t yet exist. May yield for up to 5 seconds longer than given `timeout` to ensure\\nproxy has loaded.","params":[{"name":"key","desc":"","lua_type":"DataKey"},{"name":"timeout","desc":"","lua_type":"number?"}],"returns":[{"desc":"","lua_type":"ClientProxy?"}],"function_type":"static","realm":["Client"],"yields":true,"source":{"line":227,"path":"src/Client.lua"}},{"name":"CreateTable","desc":"Serializes the given table `t` or creates an empty one and returns a `ServerProxy` that points to the \\"root\\"\\nof the given table.","params":[{"name":"key","desc":"","lua_type":"DataKey"},{"name":"t","desc":"","lua_type":"DataTable?"}],"returns":[{"desc":"","lua_type":"ServerProxy\\r\\n"}],"function_type":"static","realm":["Server"],"source":{"line":114,"path":"src/Server.lua"}},{"name":"GetProxy","desc":"","params":[{"name":"key","desc":"","lua_type":"DataKey"}],"returns":[{"desc":"","lua_type":"ServerProxy?\\r\\n"}],"function_type":"static","realm":["Server"],"source":{"line":126,"path":"src/Server.lua"}},{"name":"RemoveTable","desc":"","params":[{"name":"key","desc":"","lua_type":"DataKey"}],"returns":[],"function_type":"static","realm":["Server"],"source":{"line":132,"path":"src/Server.lua"}}],"properties":[],"types":[{"name":"AttributeValue","desc":"As the data replication is based on using Instance Attributes,\\nonly values that can be stored as Attributes are valid types to use.\\nIn the future, storing references to Instances may be facilitated using ObjectValues in the underlying code.","lua_type":"string | boolean | number | UDim | UDim2 | BrickColor | Color3 | Vector2 | Vector3 | NumberSequence | ColorSequence | NumberRange | Rect","source":{"line":7,"path":"src/Shared.lua"}},{"name":"DataKey","desc":"","lua_type":"number | string","source":{"line":10,"path":"src/Shared.lua"}},{"name":"DataTable","desc":"","lua_type":"{[DataKey]: AttributeValue | DataTable}","source":{"line":13,"path":"src/Shared.lua"}}],"name":"UnifiedData","desc":"Module for managing *trivial* data between server and client.\\nAll data is based on the server being the sole authority over data\\nand is meant to be as a simple as possible to use by essentially\\nsimulating a shared table between the server and client utilizing\\nattributes and folders.\\n\\nThe intended use-case is for when the server has a large but mostly non-volatile amount of data that needs to be synced\\nto all clients and it is inconvenient to facilitate when all one is doing is effectively modifying tables.\\nWith the intended goal being as simple to handle as possible, the code is not particularly optimized.\\n\\nThe module is expected to be imported as follows\\n```lua\\n-- Server\\nlocal UnifiedData = require(path.to.module.Server)\\n\\n-- Client\\nlocal UnifiedData = require(path.to.module.Client)\\n\\n-- Alternative, though not recommended as it will not export types\\nlocal UnifiedData = require(path.to.module).Server\\nlocal UnifiedData = require(path.to.module).Client\\n```","source":{"line":28,"path":"src/init.lua"}}')}}]);