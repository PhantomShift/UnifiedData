"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,y=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(y,o(o({ref:t},p),{},{components:n})):r.createElement(y,o({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o="Example",l={unversionedId:"intro",id:"intro",title:"Example",description:"In this very simple example, we'll create the best game ever conceived;",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/UnifiedData/docs/intro",draft:!1,editUrl:"https://github.com/PhantomShift/UnifiedData/edit/master/docs/intro.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar"},c={},s=[{value:"Assumptions",id:"assumptions",level:3},{value:"Server",id:"server",level:3},{value:"Client",id:"client",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"example"},"Example"),(0,a.kt)("p",null,"In this very simple example, we'll create the best game ever conceived;\nit rewards you for simply existing!"),(0,a.kt)("p",null,"Or in boring words, the player's score goes up as they stay in the game."),(0,a.kt)("h3",{id:"assumptions"},"Assumptions"),(0,a.kt)("p",null,"The client and server should have access to the same ",(0,a.kt)("inlineCode",{parentName:"p"},"UnifiedData")," ModuleScript. In this example, it'll just be a direct child of ",(0,a.kt)("inlineCode",{parentName:"p"},"ReplicatedStorage"),"."),(0,a.kt)("p",null,"The code under ",(0,a.kt)("a",{parentName:"p",href:"#server"},"Server")," is located in ",(0,a.kt)("inlineCode",{parentName:"p"},"ServerScriptService")," while the code under ",(0,a.kt)("a",{parentName:"p",href:"#client"},"Client")," is located in ",(0,a.kt)("inlineCode",{parentName:"p"},"StarterPlayerScripts"),"."),(0,a.kt)("h3",{id:"server"},"Server"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'--!strict\nlocal Players = game.Players\n\n-- We specifically grab the Server code for UnifiedData\nlocal UnifiedData = require(game.ReplicatedStorage.UnifiedData.Server)\n\n-- The second argument of CreateTable is optional;\n-- We could set it if say we wanted the creator to start with 9999 score\n-- This returns a ServerProxy; however by overriding the return type,\n-- it prevents mistakes when using strict type-checking\nlocal ScoreTable = UnifiedData.CreateTable("Score") :: {[string]: number}\n\nlocal function onPlayerJoined(player: Player)\n    if ScoreTable[player.Name] == nil then ScoreTable[player.Name] = 0 end\n    task.spawn(function()\n        while player.Parent ~= nil do\n            wait(1)\n            ScoreTable[player.Name] = ScoreTable[player.Name] + 1\n        end\n    end)\nend\nfor _, player in pairs(Players:GetPlayers()) do\n    onPlayerJoined(player)\nend\nPlayers.PlayerAdded:Connect(onPlayerJoined)\n')),(0,a.kt)("h3",{id:"client"},"Client"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"-- Here we grab the Client code for UnifiedData\nlocal UnifiedData = require(game.ReplicatedStorage.UnifiedData.Client)\nlocal Player = game.Players.LocalPlayer\n\n-- We could potentially use UnifiedData.GetProxy instead, however\n-- there's a chance that the data hasn't replicated yet, necessitating\n-- that we use UnifiedData.WaitForProxy instead.\nlocal ScoreTable = UnifiedData.WaitForProxy(\"Score\")\nScoreTable.Changed:Connect(function(name)\n    if name == Player.Name then\n        print(`Score is now {ScoreTable[name]}`)\n    end\nend)\n\nwait(10)\n\nprint(`My score is currently {ScoreTable[Player.Name]}`)\n")),(0,a.kt)("p",null,"With all the code in place, when testing in studio you should see print statements in the output reporting the score for you, while effectively all you've done is make a table and modify it on the server and read from it on the client."))}u.isMDXComponent=!0}}]);